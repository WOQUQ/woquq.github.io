<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git 指令学习</title>
      <link href="/2020/05/09/git-%E6%8C%87%E4%BB%A4%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/05/09/git-%E6%8C%87%E4%BB%A4%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Git的强大毋庸置疑，但它的指令实在是有些多。除了平日用的最多的add,commit,push,还有非常多我没有掌握的重要指令。近日在GitHub上找到了一个关于Git指令学习的项目（<a href="https://github.com/pcottle/learnGitBranching" target="_blank" rel="noopener">项目链接</a>），写得非常出色。正好借此机会将Git指令系统地学习一遍。</p></blockquote><h1 id="1-总览"><a href="#1-总览" class="headerlink" title="1 - 总览"></a>1 - 总览</h1><table><thead><tr><th align="center">指令</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">git commit</td><td align="center">提交记录</td></tr><tr><td align="center">git branch</td><td align="center">创建新分支</td></tr><tr><td align="center">git checkout</td><td align="center">切换分支</td></tr><tr><td align="center">git merge</td><td align="center">合并分支</td></tr><tr><td align="center">git rebase</td><td align="center">线性合并分支</td></tr><tr><td align="center">git checkout master^</td><td align="center">切换到master的父节点</td></tr><tr><td align="center">git checkout HEAD~4</td><td align="center">HEAD后退四步</td></tr><tr><td align="center">git branch -f master HEAD~3</td><td align="center">让分支指向另一个提交</td></tr><tr><td align="center">git reset</td><td align="center">撤销本地提交</td></tr><tr><td align="center">git revert</td><td align="center">撤销远程提交</td></tr></tbody></table><h1 id="2-主要"><a href="#2-主要" class="headerlink" title="2 - 主要"></a>2 - 主要</h1><h2 id="2-1-基础篇"><a href="#2-1-基础篇" class="headerlink" title="2.1 - 基础篇"></a>2.1 - 基础篇</h2><h3 id="Git-Commit"><a href="#Git-Commit" class="headerlink" title="Git Commit"></a>Git Commit</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit</span><br></pre></td></tr></table></figure><p>Git 仓库中的提交记录保存的是你的目录下所有文件的快照。</p><p>Git 希望提交记录尽可能地轻量，因此在你每次进行提交时，它并不会盲目地复制整个目录。条件允许的情况下，它会将当前版本与仓库中的上一个版本进行对比，并把所有的差异打包到一起作为一个提交记录。</p><h3 id="Git-Branch"><a href="#Git-Branch" class="headerlink" title="Git Branch"></a>Git Branch</h3><p>Git 的分支也非常轻量。<strong>它们只是简单地指向某个提交纪录</strong> —— 仅此而已。所以许多 Git 爱好者传颂：<em>早建分支！多用分支！</em></p><p>这是因为即使创建再多分的支也不会造成储存或内存上的开销，并且按逻辑分解工作到不同的分支要比维护那些特别臃肿的分支简单多了。</p><p>在将分支和提交记录结合起来后，我们会看到两者如何协作。现在只要记住使用分支其实就相当于在说：“<em>我想基于这个提交以及它所有的父提交进行新的工作。</em>”</p><p>如下，创建一个名为test的新分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p><strong><em>注意，所谓分支仅仅只是指向了某一个提交记录</em></strong><br>如下，切换到test分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>如下，在创建分支的同时切换到新的分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b &lt;your-branch-name&gt;</span><br></pre></td></tr></table></figure><h3 id="Git-Merge"><a href="#Git-Merge" class="headerlink" title="Git Merge"></a>Git Merge</h3><p>在 Git 中合并两个分支时会产生一个特殊的提交记录，它有两个父节点。翻译成自然语言相当于：“<em>我要把这两个父节点本身及它们所有的祖先都包含进来。</em>”<br>如下，例如此时处于master分支，想要合并test分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>如果 test 继承自 master，Git 什么都不用做，只是简单地把 master 移动到 test 所指向的那个提交记录。这也很好理解，因为master分支上并没有其它提交。</p><h3 id="Git-Rebase"><a href="#Git-Rebase" class="headerlink" title="Git Rebase"></a>Git Rebase</h3><p>第二种合并分支的方法是 git rebase。Rebase 实际上就是取出一系列的提交记录，“复制”它们，然后在另外一个地方逐个的放下去。<br>Rebase 的优势就是可以创造更线性的提交历史，这听上去有些难以理解。如果只允许使用 Rebase 的话，代码库的提交历史将会变得异常清晰。</p><p>如下，例如此时处于master分支，想要将test分支里的工作转移到master上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h2 id="2-2-高级篇"><a href="#2-2-高级篇" class="headerlink" title="2.2 - 高级篇"></a>2.2 - 高级篇</h2><h3 id="分离HEAD"><a href="#分离HEAD" class="headerlink" title="分离HEAD"></a>分离HEAD</h3><p>HEAD 是一个对当前检出记录的符号引用 —— 也就是指向你正在其基础上进行工作的提交记录。<br>HEAD 总是指向当前分支上最近一次提交记录。大多数修改提交树的 Git 命令都是从改变 HEAD 的指向开始的。<br>HEAD 通常情况下是指向分支名的（如 bugFix）。在你提交时，改变了 bugFix 的状态，这一变化通过 HEAD 变得可见。</p><p>分离的 HEAD 就是让其指向了某个具体的提交记录而不是分支名。<br>在命令执行之前的状态如下所示：</p><p>HEAD -&gt; master -&gt; C1</p><p>HEAD 指向 master， master 指向 C1</p><p>如下，分离HEAD，令其指向C1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout C1</span><br></pre></td></tr></table></figure><p>现在变成了</p><p>HEAD -&gt; C1</p><h3 id="相对引用"><a href="#相对引用" class="headerlink" title="相对引用"></a>相对引用</h3><p>通过指定提交记录哈希值的方式在 Git 中移动不太方便。在实际应用时，并没有像上个例子中的 C1 供你参考，所以你就不得不用 git log 来查查看提交记录的哈希值。</p><p>并且哈希值在真实的 Git 世界中也会更长（基于 SHA-1，共 40 位）。例如前一关的介绍中的提交记录的哈希值可能是fed2da64c0efc5293610bdd892f82a58e8cbc5d8。舌头都快打结了吧…比较令人欣慰的是，Git 对哈希的处理很智能。你只需要提供能够唯一标识提交记录的前几个字符即可。因此我们可以仅输入fed2 而不是上面的一长串字符。</p><p>使用相对引用的话，你就可以从一个易于记忆的地方（比如 bugFix 分支或 HEAD）开始计算。</p><p>相对引用非常给力，这里介绍两个简单的用法：</p><ul><li>使用 ^ 向上移动 1 个提交记录</li><li>使用 ~<num> 向上移动多个提交记录，如 ~3</li></ul><p>首先看看操作符 (^)。把这个符号加在引用名称的后面，表示让 Git 寻找指定提交记录的父提交。</p><p>所以 master^ 相当于“master 的父节点”。<br>master^^ 是 master 的第二个父节点</p><p>如下，切换到master的父节点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master^</span><br></pre></td></tr></table></figure><p>如下，我们也可以将 HEAD 作为相对引用的参照：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout HEAD^</span><br></pre></td></tr></table></figure><p>如下，我们用 ~<num> 一次后退四步：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout HEAD~4</span><br></pre></td></tr></table></figure><p>如下，我们可以直接使用 -f 选项让分支指向另一个提交：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -f master HEAD~3</span><br></pre></td></tr></table></figure><h3 id="撤销变更"><a href="#撤销变更" class="headerlink" title="撤销变更"></a>撤销变更</h3><h4 id="Git-Reset"><a href="#Git-Reset" class="headerlink" title="Git Reset"></a>Git Reset</h4><p>git reset 通过把分支记录回退几个提交记录来实现撤销改动。你可以将这想象成“改写历史”。git reset 向上移动分支，原来指向的提交记录就跟从来没有提交过一样。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset HEAD^</span><br></pre></td></tr></table></figure><h4 id="Git-Revert"><a href="#Git-Revert" class="headerlink" title="Git Revert"></a>Git Revert</h4><p>虽然在我们的本地分支中使用 git reset 很方便，但是这种“改写历史”的方法对大家一起使用的远程分支是无效的。<br>C0 &lt;= C1 &lt;= C2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git revert HEAD</span><br></pre></td></tr></table></figure><p>C0 &lt;= C1 &lt;= C2 &lt;= C2’<br>新提交记录 C2’ 引入了更改 —— 这些更改刚好是用来撤销 C2 这个提交的。也就是说 C2’ 的状态与 C1 是相同的。</p><h2 id="2-3-移动提交记录"><a href="#2-3-移动提交记录" class="headerlink" title="2.3 - 移动提交记录"></a>2.3 - 移动提交记录</h2><h2 id="2-4-杂项"><a href="#2-4-杂项" class="headerlink" title="2.4 - 杂项"></a>2.4 - 杂项</h2><h2 id="2-5-高级话题"><a href="#2-5-高级话题" class="headerlink" title="2.5 - 高级话题"></a>2.5 - 高级话题</h2><h1 id="3-远程"><a href="#3-远程" class="headerlink" title="3 - 远程"></a>3 - 远程</h1><h2 id="3-1-Push-amp-Pull-——-Git-远程仓库"><a href="#3-1-Push-amp-Pull-——-Git-远程仓库" class="headerlink" title="3.1 - Push &amp; Pull —— Git 远程仓库"></a>3.1 - Push &amp; Pull —— Git 远程仓库</h2><h2 id="3-2-关于-origin-和它的周边-——-Git-远程仓库高级操作"><a href="#3-2-关于-origin-和它的周边-——-Git-远程仓库高级操作" class="headerlink" title="3.2 - 关于 origin 和它的周边 —— Git 远程仓库高级操作"></a>3.2 - 关于 origin 和它的周边 —— Git 远程仓库高级操作</h2>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/04/29/hello-world/"/>
      <url>/2020/04/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
